// Generated by CoffeeScript 1.7.1
var assert, clonedeep2, fs, functions, is_plain_object, merge, print_json, test_clonedeep2, test_is_plain_object, test_merge;

functions = require('./f-empower');

fs = require('fs');

assert = require('assert');

clonedeep2 = functions.clonedeep2, is_plain_object = functions.is_plain_object, merge = functions.merge;

print_json = function(obj) {
  return console.log(JSON.stringify(obj, null, 2));
};

test_clonedeep2 = function() {
  var cloned, tree;
  tree = JSON.parse(fs.readFileSync('tree.json', 'utf-8'));
  cloned = clonedeep2(tree);
  return print_json(cloned);
};

test_merge = function() {
  var Editor, Editor2, a, b, result;
  b = {
    foo: 'bar',
    editor: 'vim',
    city: 'Moscow'
  };
  b.loop = b;
  result = merge({}, b);
  assert(result.loop.loop.loop === result.loop);
  Editor = (function() {
    function Editor(name) {
      this.name = name;
    }

    return Editor;

  })();
  Editor2 = (function() {
    function Editor2(name) {
      this.name = name;
    }

    return Editor2;

  })();
  a = {
    editor: 'vim',
    ctor_opts: {
      ctor: Editor
    },
    plugins: {
      tabs: true,
      coffeescript: true,
      clojure: true
    },
    array: ["should", "also", "be", "merged"]
  };
  b = {
    editor: 'emacs',
    ctor_opts: {
      ctor: Editor2
    },
    plugins: {
      tabs: false,
      coffeescript: false,
      javascript: true
    },
    array: ["don't"]
  };
  result = merge(a, b);
  return assert.deepEqual(result, {
    editor: 'emacs',
    ctor_opts: {
      ctor: Editor2
    },
    plugins: {
      tabs: false,
      coffeescript: false,
      clojure: true,
      javascript: true
    },
    array: ["don't", "also", "be", "merged"]
  });
};

test_is_plain_object = function() {
  var Python, sammy;
  Python = (function() {
    function Python(length) {
      this.length = length;
    }

    return Python;

  })();
  sammy = new Python(4);
  assert(!(is_plain_object(sammy)));
  return assert(is_plain_object({
    editor: 'vim'
  }));
};

test_merge();

test_is_plain_object();
