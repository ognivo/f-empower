// Generated by CoffeeScript 1.7.1
var Python, Snake, assert, clonedeep, clonedeep2, debounce, each, equal, equal_deep, fs, functions, inc, is_plain_object, map, merge, newline, print_json, push, slice, sumn, test_clonedeep, test_clonedeep2, test_clonefn, test_debounce, test_each, test_is_plain_object, test_map, test_merge, test_throttle, throttle,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

functions = require('./f-empower');

fs = require('fs');

assert = require('assert');

newline = function() {
  return console.log("");
};

clonedeep = functions.clonedeep, clonedeep2 = functions.clonedeep2, debounce = functions.debounce, each = functions.each, is_plain_object = functions.is_plain_object, inc = functions.inc, map = functions.map, merge = functions.merge, push = functions.push, slice = functions.slice, sumn = functions.sumn, throttle = functions.throttle;

print_json = function(obj) {
  return console.log(JSON.stringify(obj, null, 2));
};

equal = assert.equal;

equal_deep = assert.deepEqual;

Snake = (function() {
  function Snake(name) {
    this.name = name != null ? name : 'Pat';
  }

  return Snake;

})();

Python = (function(_super) {
  __extends(Python, _super);

  function Python(length) {
    this.length = length != null ? length : 10;
    Python.__super__.constructor.call(this);
  }

  return Python;

})(Snake);

test_clonefn = function(cloningfn) {
  var complex_src, list, python, result, singer;
  list = ["no", "rest", "for", "the", "wicked"];
  python = new Python();
  singer = {
    name: "Johny",
    last: "Cash"
  };
  complex_src = {
    string: "foo",
    answer: 42,
    python: python,
    list: list,
    obj: singer
  };
  result = cloningfn(complex_src);
  equal_deep(complex_src, result);
  python.length = 20;
  equal(result.python.length, 20);
  singer.name = "Mary";
  equal(result.obj.name, "Johny");
  list[0] = "there will be";
  return equal(result.list[0], "no");
};

test_clonedeep = function() {
  console.log("testing clonedeep...");
  test_clonefn(clonedeep);
  return console.log("ok");
};

test_clonedeep2 = function() {
  console.log("testing clonedeep2...");
  test_clonefn(clonedeep2);
  return console.log("ok");
};

test_each = function() {
  var results, write_result;
  console.log("testing each");
  results = null;
  write_result = function() {
    return push(results, slice(arguments));
  };
  results = [];
  each(write_result, [1, 2, 3]);
  equal_deep(results, [[1], [2], [3]]);
  console.log("each:arity 2 is ok");
  results = [];
  each(write_result, [1, 2], [1, 2, 3]);
  equal_deep(results, [[1, 1], [2, 2]]);
  results = [];
  each(write_result, [1, 2, 3], [1, 2, 3]);
  equal_deep(results, [[1, 1], [2, 2], [3, 3]]);
  console.log("each:arity 3 is ok");
  results = [];
  each(write_result, [1, 2], [1, 2, 3], [1, 2, 3]);
  equal_deep(results, [[1, 1, 1], [2, 2, 2]]);
  results = [];
  each(write_result, [1, 2, 3], [1, 2, 3], [1, 2, 3]);
  equal_deep(results, [[1, 1, 1], [2, 2, 2], [3, 3, 3]]);
  return console.log("each:arity n is ok");
};

test_map = function() {
  console.log("testing map");
  equal(sumn(1, 2), 3);
  equal(sumn(1, 2, 3, 4), 10);
  console.log("helper function is ok");
  equal_deep(map(inc, [0, 1, 2]), [1, 2, 3]);
  console.log("map:arity 2 is ok");
  equal_deep(map(sumn, [1, 2], [1]), [2]);
  equal_deep(map(sumn, [1, 2], [1, 2]), [2, 4]);
  console.log("map:arity 3 is ok");
  equal_deep(map(sumn, [1, 2], [1, 2, 3], [1, 2, 3]), [3, 6]);
  equal_deep(map(sumn, [1, 2, 3], [1, 2, 3], [1, 2, 3]), [3, 6, 9]);
  return console.log("map:arity n is ok");
};

test_merge = function() {
  var Editor, Editor2, a, b, result;
  b = {
    foo: 'bar',
    editor: 'vim',
    city: 'Moscow'
  };
  b.loop = b;
  result = merge({}, b);
  assert(result.loop.loop.loop === result.loop);
  Editor = (function() {
    function Editor(name) {
      this.name = name;
    }

    return Editor;

  })();
  Editor2 = (function() {
    function Editor2(name) {
      this.name = name;
    }

    return Editor2;

  })();
  a = {
    editor: 'vim',
    ctor_opts: {
      ctor: Editor
    },
    plugins: {
      tabs: true,
      coffeescript: true,
      clojure: true
    },
    array: ["should", "also", "be", "merged"]
  };
  b = {
    editor: 'emacs',
    ctor_opts: {
      ctor: Editor2
    },
    plugins: {
      tabs: false,
      coffeescript: false,
      javascript: true
    },
    array: ["don't"]
  };
  result = merge(a, b);
  return assert.deepEqual(result, {
    editor: 'emacs',
    ctor_opts: {
      ctor: Editor2
    },
    plugins: {
      tabs: false,
      coffeescript: false,
      clojure: true,
      javascript: true
    },
    array: ["don't", "also", "be", "merged"]
  });
};

test_is_plain_object = function() {
  var sammy;
  sammy = new Python(4);
  assert(!(is_plain_object(sammy)));
  return assert(is_plain_object({
    editor: 'vim'
  }));
};

test_debounce = function(next) {
  var a, dfn, fn;
  console.log("testing debounce");
  a = 0;
  fn = function() {
    return ++a * 2;
  };
  dfn = debounce(100, fn);
  equal(dfn(), void 0);
  setTimeout(function() {
    return equal(dfn(), 2);
  }, 100);
  return setTimeout(function() {
    equal(dfn(), 4);
    console.log("ok");
    newline();
    return next && next();
  }, 202);
};

test_throttle = function(next) {
  var sum, tsum;
  console.log("testing throttle");
  sum = function(a, b) {
    return a + b;
  };
  tsum = throttle(100, sum);
  equal(tsum(1, 1), 2);
  equal(tsum(2, 2), 2);
  setTimeout(function() {
    return equal(tsum(3, 3), 2);
  }, 50);
  setTimeout(function() {
    return equal(tsum(4, 4), 6);
  }, 100);
  return setTimeout(function() {
    equal(tsum(1, 1), 8);
    console.log("ok");
    newline();
    return next && next();
  }, 202);
};

test_clonedeep();

newline();

test_clonedeep2();

newline();

test_each();

newline();

test_map();

newline();

test_merge();

newline();

test_is_plain_object();

newline();

test_debounce(function() {
  return test_throttle();
});
